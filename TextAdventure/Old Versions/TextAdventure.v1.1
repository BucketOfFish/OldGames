import java.util.*;
import java.io.*;

class TextAdventure {

//Tasks:
//create choices class
//replace choices
//create reload command

	frame frame[]=new frame[500];
	int current=0,supress=0;
	boolean firstrun=true;
	final int NULL=-1,OVER=999,TOTALCHOICES=20;
	int variable[]=new int[58],sysvariable[]=new int[58];
	String gamefile;
	Scanner reader=new Scanner(System.in);

    public boolean switchboard(int tokens,String[] command) {
    	boolean print=true;
    	if(tokens!=0)
    		print=false;
    	if(gamefile.toLowerCase().equals("sgzero")) {
    		print=SGZero(tokens,command);
    	}
    	return print;
    }

//Contains game-specific actions

	public boolean SGZero(int tokens,String[] command) {
		boolean print=true;
		if(tokens==0) {
			switch(current) {}
		}
		else {
			final int LOLLIPOPS=85;
			if(tokens==1&&(command[0].toLowerCase().equals("suck"))) {
				System.out.println("No, YOU suck!");
			}
			else if(tokens==1&&(command[0].toLowerCase().equals("help"))) {
				System.out.println("I'll help you die!");
			}
			else if(LOLLIPOPS>=current&&current>56&&tokens==1&&(command[0].toLowerCase().equals("lollipop")||command[0].toLowerCase().equals("lollipops"))) {
				System.out.println("Gary has "+(v('c')+v('d'))+" lollipops.");
			}
			else if(tokens==1&&(command[0].toLowerCase().equals("repeat")||command[0].toLowerCase().equals("what")||command[0].equals("?"))) {
				System.out.println();
				supress=1;
			}
			else if(command[0].toLowerCase().equals("use")||command[0].toLowerCase().equals("punch")||command[0].toLowerCase().equals("eat")) {
				if(tokens==1) {
					if(command[0].toLowerCase().equals("eat"))
						System.out.println("Gary ate.");
					else
						System.out.println("Gary "+command[0].toLowerCase()+"ed.");
				}
				else
					System.out.println("Gary cannot "+command[0].toLowerCase()+" "+combine(1,tokens,command)+".");
			}
			else if(command[0].toLowerCase().equals("magic")) {
				System.out.println("Gary doesn't know magic.");
			}
			else if(command[0].toLowerCase().equals("code")||command[0].toLowerCase().equals("cheat")||command[0].toLowerCase().equals("password")) {
				String code;
				if(tokens==1) {
					System.out.println("Enter four digit code.");
					code=reader.next();
				}
				else
					code=command[1];
				if(code.length()==4) {
					int codeID=convert(code);
					if(codeID==-1)
						System.out.println("Invalid code.");
					else if(codeID==1011) {
						System.out.println("Code accepted: 99 lollipops.");
						if(LOLLIPOPS>=current&&current>56) {
							variable['c'-65]=99;
							variable['d'-65]=0;
							variable['l'-65]=99;
						}
					}
					else {
						Random wheel=new Random();
						int effect=10;
						boolean loop=false;
						do {
							effect=wheel.nextInt(100);
							if(effect<10) {
								if(sysvariable[effect]==0)
									sysvariable[effect]=1;
								else
									loop=true;
							}
							else
								loop=false;
						}
						while(loop);
						switch(effect) {
						case 0:
							System.out.println("Code accepted: Infinite mana.");
							break;
						case 1:
							System.out.println("Code accepted: Infinite bananas.");
							break;
						case 2:
							System.out.println("Code accepted: Difficulty increased.");
							break;
						case 3:
							System.out.println("Code accepted: Game restarted.");
							init(false);
							supress=0;
							break;
						case 4:
							System.out.println("Code accepted: Dam doors unlocked.");
							break;
						case 5:
							System.out.println("Code accepted: Self destruct.\n\nGame Over");
							System.exit(0);
							break;
						case 6:
							System.out.println("Code accepted: Graphics quality set to high.");
							break;
						case 7:
							System.out.println("Code accepted: Speed increased.");
							break;
						case 8:
							System.out.println("Code accepted: Level increased.");
							break;
						case 9:
							System.out.println("Code accepted: Old biscuit added to inventory.");
							break;
						default:
							System.out.println("Invalid code.");
							break;
						}
					}
				}
				else {
					System.out.println("Invalid code.");
				}
			}
			else
				print=false;
		}
		return print;
	}

//Contains basic actions

    public void run() {
		while(true) {
			int input=NULL,choice=NULL;
			if(supress!=2)
				display(current);
			supress=0;
			try {
				input=reader.nextInt();
    			try {
    				choice=frame[current].link[input-1];
    			}
    			catch(ArrayIndexOutOfBoundsException ex) {}
				switch(choice) {
				case OVER:
					System.out.println("\nGame Over"+(int)'A');
					System.exit(0);
				case NULL:
					System.out.println("Invalid choice. Choose again.");
					supress=2;
					break;
				default:
		    		System.out.println();
					current=choice;
					break;
				}
			}
			catch(InputMismatchException ex) {
				supress=2;
				int tokens=0;
				String[] command=new String[5];
				StringTokenizer tokenizer = new StringTokenizer(reader.nextLine());
				while(tokenizer.hasMoreTokens()) {
					command[tokens++]=tokenizer.nextToken();
				}
				if(command[0].toLowerCase().equals("save")) {
					String name;
					if(tokens==1) {
						System.out.println("Name of save file?");
						name=reader.next();
					}
					else
						name=command[1];
					boolean write=true;
					try	{
						FileInputStream in=new FileInputStream("Saves/"+gamefile+"/"+name+".save");
						System.out.println("File already exists. Overwrite? (Y/N)");
						String confirm=reader.next();
						if(confirm.toLowerCase().equals("n")||confirm.toLowerCase().equals("no"))
							write=false;
						else if(!confirm.toLowerCase().equals("y")&&!confirm.toLowerCase().equals("yes")) {
							System.out.println("Unrecognized command.");
							write=false;
						}
						in.close();
					}
					catch(IOException exc) {}
					if(write) {
						try	{
							File file=new File("Saves/"+gamefile+"/");
							file.mkdir();
						    FileOutputStream out=new FileOutputStream("Saves/"+gamefile+"/"+name+".save");
						    PrintStream printer=new PrintStream(out);
					    	printer.println(gamefile);
					    	printer.println(current);
						    for (int count=0;count<=57;count++) {
								printer.println(variable[count]);
							}
					    	for(int count=0;count<=57;count++) {
								printer.println(sysvariable[count]);
					    	}
						    out.close();
							System.out.println("File saved.");
						}
						catch (IOException e) {
							System.out.println("File not saved.");
						}
					}
					else
						System.out.println("File not saved.");
				}
				else if(command[0].toLowerCase().equals("change")||command[0].toLowerCase().equals("switch")) {
					String name;
					if(tokens==1) {
						System.out.println("Enter name of game file.");
						name=reader.next();
					}
					else
						name=command[1];
					try	{
						FileInputStream in=new FileInputStream("Games/"+name+".txa");
						in=new FileInputStream("Configuration.sys");
						BufferedReader file=new BufferedReader(new InputStreamReader(in));
						String next=file.readLine();
					    FileOutputStream out=new FileOutputStream("Configuration.temp");
					    PrintStream printer=new PrintStream(out);
					    try {
					    	printer.println(name);
							while(!(next=file.readLine()).equals(null)) {
								printer.println(next);
							}
					    }
					    catch(NullPointerException exc) {}
					    out.close();
						in.close();
					    File temp=new File("Configuration.temp");
					    File permanent=new File("Configuration.sys");
					    permanent.delete();
					    if (!temp.renameTo(permanent))
					    	System.out.println("Could not rename file");
					    init(false);
					    System.out.println();
					    supress=0;
					}
					catch(IOException exc) {
						System.out.println("Game does not exist");
					}
				}
				else if(command[0].toLowerCase().equals("load")) {
					String name;
					if(tokens==1) {
						System.out.println("Name of saved file?");
						name=reader.next();
					}
					else
						name=command[1];
					try	{
						FileInputStream in=new FileInputStream("Saves/"+gamefile+"/"+name+".save");
						BufferedReader file=new BufferedReader(new InputStreamReader(in));
						if(file.readLine().toLowerCase().equals(gamefile)) {
							System.out.println("Game loaded.\n");
							supress=1;
							init(false);
							current=convert(file.readLine());
						    for (int count=0;count<=57;count++) {
								variable[count]=convert(file.readLine());
							}
						    for (int count=0;count<=57;count++) {
								sysvariable[count]=convert(file.readLine());
							}
						}
						else
							System.out.println("Save file is for different game");
						in.close();
					}
					catch(IOException exc) {
						System.out.println("File does not exist.");
					}
				}
				else if(command[0].toLowerCase().equals("jump")) {
					int ID;
					if(tokens==1) {
						System.out.println("Frame number?");
						ID=convert(reader.next());
					}
					else
						ID=convert(command[1]);
					current=ID;
					supress=1;
				}
				else if((tokens==1||command[1].toLowerCase().equals("game"))&&(command[0].toLowerCase().equals("exit")||command[0].toLowerCase().equals("quit"))) {
					System.exit(0);
				}
				else if(command[0].toLowerCase().equals("restart")) {
					System.out.println();
					init(false);
					supress=0;
				}
				else if(tokens==1&&command[0].toLowerCase().equals("frame")) {
					System.out.println("You are on frame "+current);
				}
				else {
					if(!switchboard(tokens,command)) {
						System.out.println("Unrecognized command.");
						log(combine(0,tokens,command));
					}
				}
			}
		}
	}

    public void init(boolean run) {
    	try {
    		FileInputStream in=new FileInputStream("Configuration.sys");
    		BufferedReader file=new BufferedReader(new InputStreamReader(in));
    		String next=file.readLine();
	       	gamefile=next;
	       	in.close();
	    }
	    catch(Exception exc) {
	    	System.out.println("Corrupt configuration file.");
	    	System.exit(0);
	    }
	    current=0;
    	for(int count=0;count<=57;count++) {
    		variable[count]=0;
    	}
    	for(int count=0;count<=57;count++) {
    		sysvariable[count]=0;
    	}
		try	{
			FileInputStream in=new FileInputStream("Games/"+gamefile+".txa");
			BufferedReader file=new BufferedReader(new InputStreamReader(in));
			String next;
		    try {
				while(!(next=file.readLine()).equals(null)) {
			    	int linecount=0;
					int ID=convert(next);
					if(firstrun) {
						try {
							System.out.println("WARNING: Frame "+frame[ID].ID+" is a duplicate.");
						}
						catch(Exception ex) {}
					}
					frame[ID]=new frame(ID);
					if((next=file.readLine()).equals("-")) {
						while(!(next=file.readLine()).equals("-")) {
							frame[ID].code[frame[ID].codes]=next;
							frame[ID].codes++;
						}
					}
					else
						frame[ID].line[linecount++]=next;					
					while(!(next=file.readLine()).equals("~")) {
						frame[ID].line[linecount++]=next;
					}
					while(!(next=file.readLine()).equals("")) {
						if(next.charAt(0)>=48&&next.charAt(0)<=57) {
							int charcount=0;
							while(next.charAt(charcount++)!=' ') {}
							frame[ID].choice[frame[ID].choices]=next.substring(charcount);
							frame[ID].link[frame[ID].choices++]=convert(next.substring(0,charcount-1));
						}
						else {
							int charcount=0,charcount2=0;
							while(next.charAt(charcount++)!=' ') {}
							charcount2=charcount;
							while(next.charAt(charcount2++)!=' ') {}
							frame[ID].hiddencode[frame[ID].hiddenchoices]=next.substring(0,charcount-1);
							frame[ID].hiddenchoice[frame[ID].hiddenchoices]=next.substring(charcount2);
							frame[ID].hiddenlink[frame[ID].hiddenchoices++]=convert(next.substring(charcount,charcount2-1));
						}
					}
				}
		    }
		    catch(NullPointerException ex) {}
			in.close();
		}
		catch(IOException ex) {}
    	firstrun=false;
		if(run)
			run();
	}

    public int v(char ID) {
    	return variable[ID-65];
    }

    public String combine(int start,int tokens,String[] command) {
    	String combination="";
    	for(int count=start;count<tokens;count++) {
    		if(count!=start)
    			combination+=(" ");
    		combination+=(command[count]);
    	}
    	return combination;
    }

    public void interpret(int ID) {
    	if(supress==0) {
	    	for(int codecount=0;codecount<frame[ID].codes;codecount++) {
		    	int varID=-1,var2ID=-1,value=0,operation=0;
		    	String code=frame[ID].code[codecount];
		    	for(int count=0;count<code.length();count++) {
		    		int charID=code.charAt(count);
		    		if(charID>=65&&charID<=122) {
		    			if(varID==-1)
		    				varID=charID-65;
		    			else
		    				var2ID=charID-65;
		    		}
		    		else if(charID>=48&&charID<=57) {
		    			value=convert(code.substring(count));
		    			count=code.length();
		    		}
		    		else {
		    			operation=charID;
		    		}
		    	}
		    	if(var2ID!=-1)
		    		value=variable[var2ID];
		    	switch(operation) {
		    	case 61:
		    		variable[varID]=value;
		    		break;
		    	case (int)'*':
		        	for(int count=0;count<25;count++) {
		        		variable[count]=0;
		        	}
		    		break;
		    	case (int)'&':
		        	for(int count=0;count<=57;count++) {
		        		variable[count]=0;
		        	}
		    		break;
		    	case (int)'^':
		        	for(int count=32;count<=57;count++) {
		        		variable[count]=0;
		        	}
		    		break;
		    	case 43:
		    		variable[varID]+=value;
		    		break;
		    	case 45:
		    		variable[varID]-=value;
		    		break;
		    	}
	    	}
	    }
    	if(frame[ID].hiddenchoices>0) {
    		for(int count=frame[ID].choices;count<TOTALCHOICES;count++) {
    			frame[ID].link[count]=NULL;
    		}
    	}
    	int reveals=0;
    	for(int codecount=0;codecount<frame[ID].hiddenchoices;codecount++) {
	    	String code=frame[ID].hiddencode[codecount];
	    	boolean loop=true;
    		int varID=0,value=0,operation=0,start=0,parts=1;
	    	while(loop) {
	    		loop=false;
		    	for(int count=start;count<code.length();count++) {
		    		int length=1;
		    		int charID=code.charAt(count);
		    		if(charID>=65&&charID<=122) {
		    			varID=charID-65;
		    		}
		    		else if(charID>=48&&charID<=57) {
		    			try {
		    				while(code.charAt(count+length)>=48&&code.charAt(count+length)<=57) {
		    					length++;
		    				}
		    			}
		    			catch(StringIndexOutOfBoundsException e) {}
		    			value=convert(code.substring(count,count+length));
		    			count--;
		    			count+=length;
		    		}
		    		else if(charID==(int)',') {
		    			loop=true;
		    			parts++;
		    			start=count+1;
		    			count=code.length();
		    		}
		    		else {
		    			operation=charID;
		    		}
		    	}
		    	frame[ID].revealed[codecount]=false;
	    		switch(operation) {
		    	case 61:
		    		if(variable[varID]==value) {
		    			frame[ID].revealed[codecount]=true;
		    		}
		    		break;
		    	case 60:
		    		if(variable[varID]<value) {
		    			frame[ID].revealed[codecount]=true;
		    		}
		    		break;
		    	case 62:
		    		if(variable[varID]>value) {
		    			frame[ID].revealed[codecount]=true;
		    		}
		    		break;
		    	}
	    		if(frame[ID].revealed[codecount]==false)
	    			loop=false;
	    	}
	    	if(frame[ID].revealed[codecount]==true)
    			frame[ID].link[frame[ID].choices+(reveals++)]=frame[ID].hiddenlink[codecount];
    	}
    }

    public int convert(String input) {
    	int number=0;
    	for(int count=input.length();count>0;count--) {
    		if(input.charAt(count-1)>57||input.charAt(count-1)<48) {
    			number=-1;
    			count=0;
    		}
    		else
    			number+=(input.charAt(count-1)-48)*Math.pow(10,input.length()-count);
    	}
    	return number;
    }

    public void log(String line) {
    	line=gamefile+": "+line;
		try	{
			FileInputStream in=new FileInputStream("Error.log");
			BufferedReader file=new BufferedReader(new InputStreamReader(in));
			String next;
		    FileOutputStream out=new FileOutputStream("Error.temp");
		    PrintStream printer=new PrintStream(out);
		    try {
				while(!(next=file.readLine()).equals(null)) {
					printer.println(next);
				}
		    }
		    catch(NullPointerException exce) {
			    printer.println(line);
		    }
		    out.close();
			in.close();
		    File temp=new File("Error.temp");
		    File permanent=new File("Error.log");
		    permanent.delete();
		    temp.renameTo(permanent);
		}
		catch(IOException exc) {
			try {
				FileOutputStream out=new FileOutputStream("Error.log");
		    	PrintStream printer=new PrintStream(out);
		        printer.println(line);
		        out.close();
		    }
		    catch(Exception exce) {}
		}
    }

    public static void main(String[] args) {
    	TextAdventure game=new TextAdventure();
		game.init(true);
    }

    public void display(int ID) {
    	interpret(ID);
		if(switchboard(0,null)) {
		    try {
		    	int linecount=0;
				while(!(frame[ID].line[linecount]).equals(null)) {
					System.out.println(frame[ID].line[linecount++]);
				}
		    }
		    catch(Exception ex) {
	    		int choicecount=0;
		    	try {
					System.out.println();
					while(!(frame[ID].choice[choicecount]).equals(null)) {
						System.out.println(choicecount+1+". "+frame[ID].choice[choicecount++]);
					}
		    	}
			    catch(Exception exc) {
			    	try {
			    		int hiddenchoicecount=0;
						while(!(frame[ID].hiddenchoice[hiddenchoicecount]).equals(null)) {
							if(frame[ID].revealed[hiddenchoicecount]==true)
								System.out.println((choicecount++)+1+". "+frame[ID].hiddenchoice[hiddenchoicecount]);
							hiddenchoicecount++;
						}
			    	}
				    catch(Exception exce) {
						System.out.println();
				    }
			    }
		    }
	    }
    }

    class frame {
    	int ID,codes=0,choices=0,hiddenchoices=0;
    	String code[]=new String[10];
    	String hiddencode[]=new String[15];
    	String line[]=new String[20];
    	String choice[]=new String[5];
    	int link[]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
    	String hiddenchoice[]=new String[15];
    	int hiddenlink[]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
    	boolean revealed[]={false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};
    	
    	public frame(int newID) {
    		ID=newID;
    	}

    	class choice {
    		boolean hidden=false,revealed=false;
    		int link=NULL;
    		String code;
    	}
    }
}